datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  conversations ConversationParticipant[]
  messages      Message[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  latestMessageId String?   @unique @map("latest_message_id") @db.ObjectId
  latestMessage   Message? @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  participants ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  hasSeenLatestMessage Boolean  @map("has_seen_latest_message")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  userId         String @map("user_id") @db.ObjectId
  conversationId String @map("conversation_id") @db.ObjectId

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String @map("conversation_id") @db.ObjectId
  senderId       String @map("sender_id") @db.ObjectId

  converstion Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender      User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  isLatestIn Conversation? @relation(name: "latestConversationMessage")
}
